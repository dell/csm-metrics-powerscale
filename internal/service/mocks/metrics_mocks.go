// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/csm-metrics-powerscale/internal/service (interfaces: MetricsRecorder,AsyncMetricCreator)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	service "github.com/dell/csm-metrics-powerscale/internal/service"
	gomock "github.com/golang/mock/gomock"
	asyncfloat64 "go.opentelemetry.io/otel/metric/instrument/asyncfloat64"
	asyncint64 "go.opentelemetry.io/otel/metric/instrument/asyncint64"
)

// MockMetricsRecorder is a mock of MetricsRecorder interface.
type MockMetricsRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsRecorderMockRecorder
}

// MockMetricsRecorderMockRecorder is the mock recorder for MockMetricsRecorder.
type MockMetricsRecorderMockRecorder struct {
	mock *MockMetricsRecorder
}

// NewMockMetricsRecorder creates a new mock instance.
func NewMockMetricsRecorder(ctrl *gomock.Controller) *MockMetricsRecorder {
	mock := &MockMetricsRecorder{ctrl: ctrl}
	mock.recorder = &MockMetricsRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsRecorder) EXPECT() *MockMetricsRecorderMockRecorder {
	return m.recorder
}

// RecordClusterCapacityStatsMetrics mocks base method.
func (m *MockMetricsRecorder) RecordClusterCapacityStatsMetrics(arg0 context.Context, arg1 *service.ClusterCapacityStatsMetricsRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordClusterCapacityStatsMetrics", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordClusterCapacityStatsMetrics indicates an expected call of RecordClusterCapacityStatsMetrics.
func (mr *MockMetricsRecorderMockRecorder) RecordClusterCapacityStatsMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordClusterCapacityStatsMetrics", reflect.TypeOf((*MockMetricsRecorder)(nil).RecordClusterCapacityStatsMetrics), arg0, arg1)
}

// RecordClusterPerformanceStatsMetrics mocks base method.
func (m *MockMetricsRecorder) RecordClusterPerformanceStatsMetrics(arg0 context.Context, arg1 *service.ClusterPerformanceStatsMetricsRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordClusterPerformanceStatsMetrics", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordClusterPerformanceStatsMetrics indicates an expected call of RecordClusterPerformanceStatsMetrics.
func (mr *MockMetricsRecorderMockRecorder) RecordClusterPerformanceStatsMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordClusterPerformanceStatsMetrics", reflect.TypeOf((*MockMetricsRecorder)(nil).RecordClusterPerformanceStatsMetrics), arg0, arg1)
}

// RecordVolumeSpace mocks base method.
func (m *MockMetricsRecorder) RecordVolumeSpace(arg0 context.Context, arg1 interface{}, arg2, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordVolumeSpace", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordVolumeSpace indicates an expected call of RecordVolumeSpace.
func (mr *MockMetricsRecorderMockRecorder) RecordVolumeSpace(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordVolumeSpace", reflect.TypeOf((*MockMetricsRecorder)(nil).RecordVolumeSpace), arg0, arg1, arg2, arg3)
}

// MockAsyncMetricCreator is a mock of AsyncMetricCreator interface.
type MockAsyncMetricCreator struct {
	ctrl     *gomock.Controller
	recorder *MockAsyncMetricCreatorMockRecorder
}

// MockAsyncMetricCreatorMockRecorder is the mock recorder for MockAsyncMetricCreator.
type MockAsyncMetricCreatorMockRecorder struct {
	mock *MockAsyncMetricCreator
}

// NewMockAsyncMetricCreator creates a new mock instance.
func NewMockAsyncMetricCreator(ctrl *gomock.Controller) *MockAsyncMetricCreator {
	mock := &MockAsyncMetricCreator{ctrl: ctrl}
	mock.recorder = &MockAsyncMetricCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsyncMetricCreator) EXPECT() *MockAsyncMetricCreatorMockRecorder {
	return m.recorder
}

// AsyncFloat64 mocks base method.
func (m *MockAsyncMetricCreator) AsyncFloat64() asyncfloat64.InstrumentProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncFloat64")
	ret0, _ := ret[0].(asyncfloat64.InstrumentProvider)
	return ret0
}

// AsyncFloat64 indicates an expected call of AsyncFloat64.
func (mr *MockAsyncMetricCreatorMockRecorder) AsyncFloat64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncFloat64", reflect.TypeOf((*MockAsyncMetricCreator)(nil).AsyncFloat64))
}

// AsyncInt64 mocks base method.
func (m *MockAsyncMetricCreator) AsyncInt64() asyncint64.InstrumentProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncInt64")
	ret0, _ := ret[0].(asyncint64.InstrumentProvider)
	return ret0
}

// AsyncInt64 indicates an expected call of AsyncInt64.
func (mr *MockAsyncMetricCreatorMockRecorder) AsyncInt64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncInt64", reflect.TypeOf((*MockAsyncMetricCreator)(nil).AsyncInt64))
}
