// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/csm-metrics-powerscale/internal/service (interfaces: MetricsRecorder,AsyncInt64Creater)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	asyncint64 "go.opentelemetry.io/otel/metric/instrument/asyncint64"
)

// MockMetricsRecorder is a mock of MetricsRecorder interface.
type MockMetricsRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsRecorderMockRecorder
}

// MockMetricsRecorderMockRecorder is the mock recorder for MockMetricsRecorder.
type MockMetricsRecorderMockRecorder struct {
	mock *MockMetricsRecorder
}

// NewMockMetricsRecorder creates a new mock instance.
func NewMockMetricsRecorder(ctrl *gomock.Controller) *MockMetricsRecorder {
	mock := &MockMetricsRecorder{ctrl: ctrl}
	mock.recorder = &MockMetricsRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsRecorder) EXPECT() *MockMetricsRecorderMockRecorder {
	return m.recorder
}

// Record mocks base method.
func (m *MockMetricsRecorder) Record(arg0 context.Context, arg1 interface{}, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Record", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Record indicates an expected call of Record.
func (mr *MockMetricsRecorderMockRecorder) Record(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockMetricsRecorder)(nil).Record), arg0, arg1, arg2)
}

// MockAsyncInt64Creater is a mock of AsyncInt64Creater interface.
type MockAsyncInt64Creater struct {
	ctrl     *gomock.Controller
	recorder *MockAsyncInt64CreaterMockRecorder
}

// MockAsyncInt64CreaterMockRecorder is the mock recorder for MockAsyncInt64Creater.
type MockAsyncInt64CreaterMockRecorder struct {
	mock *MockAsyncInt64Creater
}

// NewMockAsyncInt64Creater creates a new mock instance.
func NewMockAsyncInt64Creater(ctrl *gomock.Controller) *MockAsyncInt64Creater {
	mock := &MockAsyncInt64Creater{ctrl: ctrl}
	mock.recorder = &MockAsyncInt64CreaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsyncInt64Creater) EXPECT() *MockAsyncInt64CreaterMockRecorder {
	return m.recorder
}

// AsyncInt64 mocks base method.
func (m *MockAsyncInt64Creater) AsyncInt64() asyncint64.InstrumentProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncInt64")
	ret0, _ := ret[0].(asyncint64.InstrumentProvider)
	return ret0
}

// AsyncInt64 indicates an expected call of AsyncInt64.
func (mr *MockAsyncInt64CreaterMockRecorder) AsyncInt64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncInt64", reflect.TypeOf((*MockAsyncInt64Creater)(nil).AsyncInt64))
}
