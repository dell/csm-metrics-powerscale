// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/csm-metrics-powerscale/internal/service (interfaces: MetricsRecorder,MeterCreator)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	service "github.com/dell/csm-metrics-powerscale/internal/service"
	gomock "github.com/golang/mock/gomock"
	metric "go.opentelemetry.io/otel/metric"
)

// MockMetricsRecorder is a mock of MetricsRecorder interface.
type MockMetricsRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsRecorderMockRecorder
}

// MockMetricsRecorderMockRecorder is the mock recorder for MockMetricsRecorder.
type MockMetricsRecorderMockRecorder struct {
	mock *MockMetricsRecorder
}

// NewMockMetricsRecorder creates a new mock instance.
func NewMockMetricsRecorder(ctrl *gomock.Controller) *MockMetricsRecorder {
	mock := &MockMetricsRecorder{ctrl: ctrl}
	mock.recorder = &MockMetricsRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsRecorder) EXPECT() *MockMetricsRecorderMockRecorder {
	return m.recorder
}

// RecordClusterCapacityStatsMetrics mocks base method.
func (m *MockMetricsRecorder) RecordClusterCapacityStatsMetrics(arg0 context.Context, arg1 *service.ClusterCapacityStatsMetricsRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordClusterCapacityStatsMetrics", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordClusterCapacityStatsMetrics indicates an expected call of RecordClusterCapacityStatsMetrics.
func (mr *MockMetricsRecorderMockRecorder) RecordClusterCapacityStatsMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordClusterCapacityStatsMetrics", reflect.TypeOf((*MockMetricsRecorder)(nil).RecordClusterCapacityStatsMetrics), arg0, arg1)
}

// RecordClusterPerformanceStatsMetrics mocks base method.
func (m *MockMetricsRecorder) RecordClusterPerformanceStatsMetrics(arg0 context.Context, arg1 *service.ClusterPerformanceStatsMetricsRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordClusterPerformanceStatsMetrics", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordClusterPerformanceStatsMetrics indicates an expected call of RecordClusterPerformanceStatsMetrics.
func (mr *MockMetricsRecorderMockRecorder) RecordClusterPerformanceStatsMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordClusterPerformanceStatsMetrics", reflect.TypeOf((*MockMetricsRecorder)(nil).RecordClusterPerformanceStatsMetrics), arg0, arg1)
}

// RecordClusterQuota mocks base method.
func (m *MockMetricsRecorder) RecordClusterQuota(arg0 context.Context, arg1 interface{}, arg2 *service.ClusterQuotaRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordClusterQuota", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordClusterQuota indicates an expected call of RecordClusterQuota.
func (mr *MockMetricsRecorderMockRecorder) RecordClusterQuota(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordClusterQuota", reflect.TypeOf((*MockMetricsRecorder)(nil).RecordClusterQuota), arg0, arg1, arg2)
}

// RecordVolumeQuota mocks base method.
func (m *MockMetricsRecorder) RecordVolumeQuota(arg0 context.Context, arg1 interface{}, arg2 *service.VolumeQuotaMetricsRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordVolumeQuota", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordVolumeQuota indicates an expected call of RecordVolumeQuota.
func (mr *MockMetricsRecorderMockRecorder) RecordVolumeQuota(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordVolumeQuota", reflect.TypeOf((*MockMetricsRecorder)(nil).RecordVolumeQuota), arg0, arg1, arg2)
}

// MockMeterCreator is a mock of MeterCreator interface.
type MockMeterCreator struct {
	ctrl     *gomock.Controller
	recorder *MockMeterCreatorMockRecorder
}

// MockMeterCreatorMockRecorder is the mock recorder for MockMeterCreator.
type MockMeterCreatorMockRecorder struct {
	mock *MockMeterCreator
}

// NewMockMeterCreator creates a new mock instance.
func NewMockMeterCreator(ctrl *gomock.Controller) *MockMeterCreator {
	mock := &MockMeterCreator{ctrl: ctrl}
	mock.recorder = &MockMeterCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeterCreator) EXPECT() *MockMeterCreatorMockRecorder {
	return m.recorder
}

// MeterProvider mocks base method.
func (m *MockMeterCreator) MeterProvider() (metric.Meter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeterProvider")
	ret0, _ := ret[0].(metric.Meter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MeterProvider indicates an expected call of MeterProvider.
func (mr *MockMeterCreatorMockRecorder) MeterProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeterProvider", reflect.TypeOf((*MockMeterCreator)(nil).MeterProvider))
}
